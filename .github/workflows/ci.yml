name: Build + Deploy

on:
  push:
    branches: [main]
    tags: ["*.*.*"]
  pull_request:
    branches: [main]

env:
  CIBW_TEST_REQUIRES: "sympy pytest"
  CIBW_TEST_COMMAND: pytest {package}/tests -v

jobs:

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # setuptools_scm won't work with shallow clone; fetch all history
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Build sdist
      run: pipx run build --sdist
    - name: Check metadata
      run: pipx run twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  build_wheels:
    name: ${{ matrix.type }} ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        arch: [auto64]
        build: ["*"]
        skip: ["pp*"]
        include:
          # the manylinux1 docker images only contain from python3.6 to 3.9
          - os: ubuntu-latest
            type: manylinux1
            arch: auto64
            build: "cp{36,37,38,39}-manylinux*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
            CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # the manylinux2010 image also contains python 3.10
          - os: ubuntu-latest
            arch: auto64
            type: manylinux2010
            build: "pp37-manylinux* pp38-manylinux* cp310-manylinux*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
            CIBW_MANYLINUX_I686_IMAGE: manylinux2010
          # the manylinux2014 image also contains pypy3.9 and CPython 3.11 and 3.12
          - os: ubuntu-latest
            arch: auto64
            type: manylinux2014
            build: "pp39-manylinux* cp311-manylinux* cp312-manylinux*"
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
            CIBW_MANYLINUX_I686_IMAGE: manylinux2014

          - os: macos-latest
            arch: universal2
            build: "*"
            skip: "pp*"

          - os: windows-latest
            arch: auto32
            build: "*"
            skip: "pp*"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse .
      env:
        CIBW_BUILD: ${{ matrix.build }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.CIBW_MANYLINUX_I686_IMAGE }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.CIBW_MANYLINUX_X86_64_IMAGE }}
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_SKIP: ${{ matrix.skip }}
    - uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl

  build_arch_wheels:
    name: py${{ matrix.python }} on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # aarch64 uses qemu so it's slow, build each py version in parallel jobs
        python: [36, 37, 38, 39, 310, 311, 312]
        arch: [aarch64]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: docker/setup-qemu-action@v1.2.0
      with:
        platforms: all
    - name: Install dependencies
      run: pip install cibuildwheel
    - name: Build Wheels
      run: python -m cibuildwheel --output-dir wheelhouse .
      env:
        CIBW_BUILD: cp${{ matrix.python }}-manylinux*
        CIBW_ARCHS: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl

  deploy:
    name: Upload if tagged commit
    if: startsWith(github.ref, 'refs/tags/')
    # but only if all build jobs completed successfully
    needs: [build_wheels, build_arch_wheels, build_sdist]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v4.1.7
      with:
        name: artifact
        path: dist

    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. 0.1.0a1, 1.2.0b2 or 2.3.0rc3, but not 1.0.0
        PRERELEASE_TAG_PATTERN: "[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # strip leading 'refs/tags/' to get the tag name
        TAG_NAME="${GITHUB_REF##*/}"
        # Dump tag message to temporary .md file (excluding the PGP signature at the bottom)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME | sed -n '/-----BEGIN PGP SIGNATURE-----/q;p')
        echo "$TAG_MESSAGE" > "${{ runner.temp }}/release_notes.md"
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "$TAG_NAME"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "${{ runner.temp }}/release_notes.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}

    - uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}
